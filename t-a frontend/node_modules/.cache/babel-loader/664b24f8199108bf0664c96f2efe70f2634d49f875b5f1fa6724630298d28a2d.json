{"ast":null,"code":"var _jsxFileName = \"/Users/khalil/text-analyser/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport TextInput from './components/TextInput';\nimport AnalysisResult from './components/AnalysisResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [analysis, setAnalysis] = useState(null);\n  const handleTextSubmit = async text => {\n    // Mock backend call, replace this with your actual API call later\n    const mockAnalysis = text.split(' ').map(word => ({\n      text: word,\n      pos: 'noun',\n      // For now, assume everything is a noun (mock)\n      dependency: 'subject' // Placeholder\n    }));\n    setAnalysis(mockAnalysis);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Text Analyser \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), \" \", /*#__PURE__*/_jsxDEV(TextInput, {\n      onSubmit: handleTextSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 31\n    }, this), \" \", /*#__PURE__*/_jsxDEV(AnalysisResult, {\n      analysis: analysis\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 8\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n};\n_s(App, \"jQDXgiydi+o0L0KsQ3xfh/w6cDg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextInput","AnalysisResult","jsxDEV","_jsxDEV","App","_s","analysis","setAnalysis","handleTextSubmit","text","mockAnalysis","split","map","word","pos","dependency","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/Users/khalil/text-analyser/src/App.js"],"sourcesContent":["// src/App.js\nimport React, {\n  useState\n} from 'react';\nimport TextInput from './components/TextInput';\nimport AnalysisResult from './components/AnalysisResult';\n\nconst App = () => {\n  const [analysis, setAnalysis] = useState(null);\n\n  const handleTextSubmit = async (text) => {\n    // Mock backend call, replace this with your actual API call later\n    const mockAnalysis = text.split(' ').map((word) => ({\n      text: word,\n      pos: 'noun', // For now, assume everything is a noun (mock)\n      dependency: 'subject', // Placeholder\n    }));\n\n    setAnalysis(mockAnalysis);\n  };\n\n  return ( <\n    div >\n    <\n    h1 > Text Analyser < /h1> <\n    TextInput onSubmit = {\n      handleTextSubmit\n    }\n    /> <\n    AnalysisResult analysis = {\n      analysis\n    }\n    /> <\n    /div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IACVC,QAAQ,QACH,OAAO;AACd,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,cAAc,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMS,gBAAgB,GAAG,MAAOC,IAAI,IAAK;IACvC;IACA,MAAMC,YAAY,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAEC,IAAI,KAAM;MAClDJ,IAAI,EAAEI,IAAI;MACVC,GAAG,EAAE,MAAM;MAAE;MACbC,UAAU,EAAE,SAAS,CAAE;IACzB,CAAC,CAAC,CAAC;IAEHR,WAAW,CAACG,YAAY,CAAC;EAC3B,CAAC;EAED,oBAASP,OAAA;IAAAa,QAAA,gBAEPb,OAAA;MAAAa,QAAA,EACI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,KAAC,eAAAjB,OAAA,CAC1BH,SAAS;MAACqB,QAAQ,EAChBb;IACD;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,KAAC,eAAAjB,OAAA,CACHF,cAAc;MAACK,QAAQ,EACrBA;IACD;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAET,CAAC;AAACf,EAAA,CA5BID,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AA8BT,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}